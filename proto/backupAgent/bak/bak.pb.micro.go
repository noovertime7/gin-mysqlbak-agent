// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: bak.proto

package bak

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for BakService service

func NewBakServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for BakService service

type BakService interface {
	StartBak(ctx context.Context, in *StartBakInput, opts ...client.CallOption) (*BakOneMessage, error)
	StopBak(ctx context.Context, in *StopBakInput, opts ...client.CallOption) (*BakOneMessage, error)
	TestBak(ctx context.Context, in *StartBakInput, opts ...client.CallOption) (*BakOneMessage, error)
	StartBakByHost(ctx context.Context, in *StartBakByHostInput, opts ...client.CallOption) (*BakOneMessage, error)
	StopBakByHost(ctx context.Context, in *StopBakByHostInput, opts ...client.CallOption) (*BakOneMessage, error)
}

type bakService struct {
	c    client.Client
	name string
}

func NewBakService(name string, c client.Client) BakService {
	return &bakService{
		c:    c,
		name: name,
	}
}

func (c *bakService) StartBak(ctx context.Context, in *StartBakInput, opts ...client.CallOption) (*BakOneMessage, error) {
	req := c.c.NewRequest(c.name, "BakService.StartBak", in)
	out := new(BakOneMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakService) StopBak(ctx context.Context, in *StopBakInput, opts ...client.CallOption) (*BakOneMessage, error) {
	req := c.c.NewRequest(c.name, "BakService.StopBak", in)
	out := new(BakOneMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakService) TestBak(ctx context.Context, in *StartBakInput, opts ...client.CallOption) (*BakOneMessage, error) {
	req := c.c.NewRequest(c.name, "BakService.TestBak", in)
	out := new(BakOneMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakService) StartBakByHost(ctx context.Context, in *StartBakByHostInput, opts ...client.CallOption) (*BakOneMessage, error) {
	req := c.c.NewRequest(c.name, "BakService.StartBakByHost", in)
	out := new(BakOneMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakService) StopBakByHost(ctx context.Context, in *StopBakByHostInput, opts ...client.CallOption) (*BakOneMessage, error) {
	req := c.c.NewRequest(c.name, "BakService.StopBakByHost", in)
	out := new(BakOneMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BakService service

type BakServiceHandler interface {
	StartBak(context.Context, *StartBakInput, *BakOneMessage) error
	StopBak(context.Context, *StopBakInput, *BakOneMessage) error
	TestBak(context.Context, *StartBakInput, *BakOneMessage) error
	StartBakByHost(context.Context, *StartBakByHostInput, *BakOneMessage) error
	StopBakByHost(context.Context, *StopBakByHostInput, *BakOneMessage) error
}

func RegisterBakServiceHandler(s server.Server, hdlr BakServiceHandler, opts ...server.HandlerOption) error {
	type bakService interface {
		StartBak(ctx context.Context, in *StartBakInput, out *BakOneMessage) error
		StopBak(ctx context.Context, in *StopBakInput, out *BakOneMessage) error
		TestBak(ctx context.Context, in *StartBakInput, out *BakOneMessage) error
		StartBakByHost(ctx context.Context, in *StartBakByHostInput, out *BakOneMessage) error
		StopBakByHost(ctx context.Context, in *StopBakByHostInput, out *BakOneMessage) error
	}
	type BakService struct {
		bakService
	}
	h := &bakServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&BakService{h}, opts...))
}

type bakServiceHandler struct {
	BakServiceHandler
}

func (h *bakServiceHandler) StartBak(ctx context.Context, in *StartBakInput, out *BakOneMessage) error {
	return h.BakServiceHandler.StartBak(ctx, in, out)
}

func (h *bakServiceHandler) StopBak(ctx context.Context, in *StopBakInput, out *BakOneMessage) error {
	return h.BakServiceHandler.StopBak(ctx, in, out)
}

func (h *bakServiceHandler) TestBak(ctx context.Context, in *StartBakInput, out *BakOneMessage) error {
	return h.BakServiceHandler.TestBak(ctx, in, out)
}

func (h *bakServiceHandler) StartBakByHost(ctx context.Context, in *StartBakByHostInput, out *BakOneMessage) error {
	return h.BakServiceHandler.StartBakByHost(ctx, in, out)
}

func (h *bakServiceHandler) StopBakByHost(ctx context.Context, in *StopBakByHostInput, out *BakOneMessage) error {
	return h.BakServiceHandler.StopBakByHost(ctx, in, out)
}

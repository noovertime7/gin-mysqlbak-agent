// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/backupAgent/esbak/es_bak.proto

package esbak

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for EsBakService service

func NewEsBakServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for EsBakService service

type EsBakService interface {
	Start(ctx context.Context, in *StartEsBakInput, opts ...client.CallOption) (*EsBakOneMessage, error)
	Stop(ctx context.Context, in *StopEsBakInput, opts ...client.CallOption) (*EsBakOneMessage, error)
}

type esBakService struct {
	c    client.Client
	name string
}

func NewEsBakService(name string, c client.Client) EsBakService {
	return &esBakService{
		c:    c,
		name: name,
	}
}

func (c *esBakService) Start(ctx context.Context, in *StartEsBakInput, opts ...client.CallOption) (*EsBakOneMessage, error) {
	req := c.c.NewRequest(c.name, "EsBakService.Start", in)
	out := new(EsBakOneMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esBakService) Stop(ctx context.Context, in *StopEsBakInput, opts ...client.CallOption) (*EsBakOneMessage, error) {
	req := c.c.NewRequest(c.name, "EsBakService.Stop", in)
	out := new(EsBakOneMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EsBakService service

type EsBakServiceHandler interface {
	Start(context.Context, *StartEsBakInput, *EsBakOneMessage) error
	Stop(context.Context, *StopEsBakInput, *EsBakOneMessage) error
}

func RegisterEsBakServiceHandler(s server.Server, hdlr EsBakServiceHandler, opts ...server.HandlerOption) error {
	type esBakService interface {
		Start(ctx context.Context, in *StartEsBakInput, out *EsBakOneMessage) error
		Stop(ctx context.Context, in *StopEsBakInput, out *EsBakOneMessage) error
	}
	type EsBakService struct {
		esBakService
	}
	h := &esBakServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&EsBakService{h}, opts...))
}

type esBakServiceHandler struct {
	EsBakServiceHandler
}

func (h *esBakServiceHandler) Start(ctx context.Context, in *StartEsBakInput, out *EsBakOneMessage) error {
	return h.EsBakServiceHandler.Start(ctx, in, out)
}

func (h *esBakServiceHandler) Stop(ctx context.Context, in *StopEsBakInput, out *EsBakOneMessage) error {
	return h.EsBakServiceHandler.Stop(ctx, in, out)
}

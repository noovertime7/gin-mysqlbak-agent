// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: es_history.proto

package esbak

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for EsHistoryService service

func NewEsHistoryServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for EsHistoryService service

type EsHistoryService interface {
	GetEsHistoryList(ctx context.Context, in *GetEsHistoryListInput, opts ...client.CallOption) (*ESHistoryListOutput, error)
	DeleteESHistory(ctx context.Context, in *ESHistoryIDInput, opts ...client.CallOption) (*ESHistoryOneMessage, error)
	GetEsHistoryDetail(ctx context.Context, in *ESHistoryIDInput, opts ...client.CallOption) (*EsHistoryDetailOut, error)
	GetEsHistoryNumInfo(ctx context.Context, in *EsHistoryEmpty, opts ...client.CallOption) (*EsHistoryNumInfoOut, error)
}

type esHistoryService struct {
	c    client.Client
	name string
}

func NewEsHistoryService(name string, c client.Client) EsHistoryService {
	return &esHistoryService{
		c:    c,
		name: name,
	}
}

func (c *esHistoryService) GetEsHistoryList(ctx context.Context, in *GetEsHistoryListInput, opts ...client.CallOption) (*ESHistoryListOutput, error) {
	req := c.c.NewRequest(c.name, "EsHistoryService.GetEsHistoryList", in)
	out := new(ESHistoryListOutput)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esHistoryService) DeleteESHistory(ctx context.Context, in *ESHistoryIDInput, opts ...client.CallOption) (*ESHistoryOneMessage, error) {
	req := c.c.NewRequest(c.name, "EsHistoryService.DeleteESHistory", in)
	out := new(ESHistoryOneMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esHistoryService) GetEsHistoryDetail(ctx context.Context, in *ESHistoryIDInput, opts ...client.CallOption) (*EsHistoryDetailOut, error) {
	req := c.c.NewRequest(c.name, "EsHistoryService.GetEsHistoryDetail", in)
	out := new(EsHistoryDetailOut)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esHistoryService) GetEsHistoryNumInfo(ctx context.Context, in *EsHistoryEmpty, opts ...client.CallOption) (*EsHistoryNumInfoOut, error) {
	req := c.c.NewRequest(c.name, "EsHistoryService.GetEsHistoryNumInfo", in)
	out := new(EsHistoryNumInfoOut)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EsHistoryService service

type EsHistoryServiceHandler interface {
	GetEsHistoryList(context.Context, *GetEsHistoryListInput, *ESHistoryListOutput) error
	DeleteESHistory(context.Context, *ESHistoryIDInput, *ESHistoryOneMessage) error
	GetEsHistoryDetail(context.Context, *ESHistoryIDInput, *EsHistoryDetailOut) error
	GetEsHistoryNumInfo(context.Context, *EsHistoryEmpty, *EsHistoryNumInfoOut) error
}

func RegisterEsHistoryServiceHandler(s server.Server, hdlr EsHistoryServiceHandler, opts ...server.HandlerOption) error {
	type esHistoryService interface {
		GetEsHistoryList(ctx context.Context, in *GetEsHistoryListInput, out *ESHistoryListOutput) error
		DeleteESHistory(ctx context.Context, in *ESHistoryIDInput, out *ESHistoryOneMessage) error
		GetEsHistoryDetail(ctx context.Context, in *ESHistoryIDInput, out *EsHistoryDetailOut) error
		GetEsHistoryNumInfo(ctx context.Context, in *EsHistoryEmpty, out *EsHistoryNumInfoOut) error
	}
	type EsHistoryService struct {
		esHistoryService
	}
	h := &esHistoryServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&EsHistoryService{h}, opts...))
}

type esHistoryServiceHandler struct {
	EsHistoryServiceHandler
}

func (h *esHistoryServiceHandler) GetEsHistoryList(ctx context.Context, in *GetEsHistoryListInput, out *ESHistoryListOutput) error {
	return h.EsHistoryServiceHandler.GetEsHistoryList(ctx, in, out)
}

func (h *esHistoryServiceHandler) DeleteESHistory(ctx context.Context, in *ESHistoryIDInput, out *ESHistoryOneMessage) error {
	return h.EsHistoryServiceHandler.DeleteESHistory(ctx, in, out)
}

func (h *esHistoryServiceHandler) GetEsHistoryDetail(ctx context.Context, in *ESHistoryIDInput, out *EsHistoryDetailOut) error {
	return h.EsHistoryServiceHandler.GetEsHistoryDetail(ctx, in, out)
}

func (h *esHistoryServiceHandler) GetEsHistoryNumInfo(ctx context.Context, in *EsHistoryEmpty, out *EsHistoryNumInfoOut) error {
	return h.EsHistoryServiceHandler.GetEsHistoryNumInfo(ctx, in, out)
}

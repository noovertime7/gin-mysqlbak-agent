// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.13.0
// source: task.proto

package task

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskOneMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"message"
	Message string `protobuf:"bytes,1,opt,name=Message,proto3" json:"message"`
	// @inject_tag: json:"content"
	OK bool `protobuf:"varint,2,opt,name=OK,proto3" json:"content"`
}

func (x *TaskOneMessage) Reset() {
	*x = TaskOneMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskOneMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskOneMessage) ProtoMessage() {}

func (x *TaskOneMessage) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskOneMessage.ProtoReflect.Descriptor instead.
func (*TaskOneMessage) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{0}
}

func (x *TaskOneMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaskOneMessage) GetOK() bool {
	if x != nil {
		return x.OK
	}
	return false
}

type TaskAddInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostID          int64  `protobuf:"varint,1,opt,name=HostID,proto3" json:"HostID,omitempty"`
	DBName          string `protobuf:"bytes,2,opt,name=DBName,proto3" json:"DBName,omitempty"`
	ServiceName     string `protobuf:"bytes,16,opt,name=ServiceName,proto3" json:"ServiceName,omitempty"`
	BackupCycle     string `protobuf:"bytes,3,opt,name=BackupCycle,proto3" json:"BackupCycle,omitempty"`
	KeepNumber      int64  `protobuf:"varint,4,opt,name=KeepNumber,proto3" json:"KeepNumber,omitempty"`
	IsAllDBBak      int64  `protobuf:"varint,5,opt,name=IsAllDBBak,proto3" json:"IsAllDBBak,omitempty"`
	IsDingSend      int64  `protobuf:"varint,6,opt,name=IsDingSend,proto3" json:"IsDingSend,omitempty"`
	DingAccessToken string `protobuf:"bytes,7,opt,name=DingAccessToken,proto3" json:"DingAccessToken,omitempty"`
	DingSecret      string `protobuf:"bytes,8,opt,name=DingSecret,proto3" json:"DingSecret,omitempty"`
	OssType         int64  `protobuf:"varint,9,opt,name=OssType,proto3" json:"OssType,omitempty"`
	IsOssSave       int64  `protobuf:"varint,10,opt,name=IsOssSave,proto3" json:"IsOssSave,omitempty"`
	Endpoint        string `protobuf:"bytes,11,opt,name=Endpoint,proto3" json:"Endpoint,omitempty"`
	OssAccess       string `protobuf:"bytes,12,opt,name=OssAccess,proto3" json:"OssAccess,omitempty"`
	OssSecret       string `protobuf:"bytes,13,opt,name=OssSecret,proto3" json:"OssSecret,omitempty"`
	BucketName      string `protobuf:"bytes,14,opt,name=BucketName,proto3" json:"BucketName,omitempty"`
	Directory       string `protobuf:"bytes,15,opt,name=Directory,proto3" json:"Directory,omitempty"`
}

func (x *TaskAddInput) Reset() {
	*x = TaskAddInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAddInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAddInput) ProtoMessage() {}

func (x *TaskAddInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAddInput.ProtoReflect.Descriptor instead.
func (*TaskAddInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{1}
}

func (x *TaskAddInput) GetHostID() int64 {
	if x != nil {
		return x.HostID
	}
	return 0
}

func (x *TaskAddInput) GetDBName() string {
	if x != nil {
		return x.DBName
	}
	return ""
}

func (x *TaskAddInput) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *TaskAddInput) GetBackupCycle() string {
	if x != nil {
		return x.BackupCycle
	}
	return ""
}

func (x *TaskAddInput) GetKeepNumber() int64 {
	if x != nil {
		return x.KeepNumber
	}
	return 0
}

func (x *TaskAddInput) GetIsAllDBBak() int64 {
	if x != nil {
		return x.IsAllDBBak
	}
	return 0
}

func (x *TaskAddInput) GetIsDingSend() int64 {
	if x != nil {
		return x.IsDingSend
	}
	return 0
}

func (x *TaskAddInput) GetDingAccessToken() string {
	if x != nil {
		return x.DingAccessToken
	}
	return ""
}

func (x *TaskAddInput) GetDingSecret() string {
	if x != nil {
		return x.DingSecret
	}
	return ""
}

func (x *TaskAddInput) GetOssType() int64 {
	if x != nil {
		return x.OssType
	}
	return 0
}

func (x *TaskAddInput) GetIsOssSave() int64 {
	if x != nil {
		return x.IsOssSave
	}
	return 0
}

func (x *TaskAddInput) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *TaskAddInput) GetOssAccess() string {
	if x != nil {
		return x.OssAccess
	}
	return ""
}

func (x *TaskAddInput) GetOssSecret() string {
	if x != nil {
		return x.OssSecret
	}
	return ""
}

func (x *TaskAddInput) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *TaskAddInput) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

type TaskIDInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *TaskIDInput) Reset() {
	*x = TaskIDInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskIDInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIDInput) ProtoMessage() {}

func (x *TaskIDInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIDInput.ProtoReflect.Descriptor instead.
func (*TaskIDInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{2}
}

func (x *TaskIDInput) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type TaskUpdateInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              int64  `protobuf:"varint,17,opt,name=ID,proto3" json:"ID,omitempty"`
	HostID          int64  `protobuf:"varint,1,opt,name=HostID,proto3" json:"HostID,omitempty"`
	DBName          string `protobuf:"bytes,2,opt,name=DBName,proto3" json:"DBName,omitempty"`
	ServiceName     string `protobuf:"bytes,16,opt,name=ServiceName,proto3" json:"ServiceName,omitempty"`
	BackupCycle     string `protobuf:"bytes,3,opt,name=BackupCycle,proto3" json:"BackupCycle,omitempty"`
	KeepNumber      int64  `protobuf:"varint,4,opt,name=KeepNumber,proto3" json:"KeepNumber,omitempty"`
	IsAllDBBak      int64  `protobuf:"varint,5,opt,name=IsAllDBBak,proto3" json:"IsAllDBBak,omitempty"`
	IsDingSend      int64  `protobuf:"varint,6,opt,name=IsDingSend,proto3" json:"IsDingSend,omitempty"`
	DingAccessToken string `protobuf:"bytes,7,opt,name=DingAccessToken,proto3" json:"DingAccessToken,omitempty"`
	DingSecret      string `protobuf:"bytes,8,opt,name=DingSecret,proto3" json:"DingSecret,omitempty"`
	OssType         int64  `protobuf:"varint,9,opt,name=OssType,proto3" json:"OssType,omitempty"`
	IsOssSave       int64  `protobuf:"varint,10,opt,name=IsOssSave,proto3" json:"IsOssSave,omitempty"`
	Endpoint        string `protobuf:"bytes,11,opt,name=Endpoint,proto3" json:"Endpoint,omitempty"`
	OssAccess       string `protobuf:"bytes,12,opt,name=OssAccess,proto3" json:"OssAccess,omitempty"`
	OssSecret       string `protobuf:"bytes,13,opt,name=OssSecret,proto3" json:"OssSecret,omitempty"`
	BucketName      string `protobuf:"bytes,14,opt,name=BucketName,proto3" json:"BucketName,omitempty"`
	Directory       string `protobuf:"bytes,15,opt,name=Directory,proto3" json:"Directory,omitempty"`
}

func (x *TaskUpdateInput) Reset() {
	*x = TaskUpdateInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskUpdateInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskUpdateInput) ProtoMessage() {}

func (x *TaskUpdateInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskUpdateInput.ProtoReflect.Descriptor instead.
func (*TaskUpdateInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{3}
}

func (x *TaskUpdateInput) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TaskUpdateInput) GetHostID() int64 {
	if x != nil {
		return x.HostID
	}
	return 0
}

func (x *TaskUpdateInput) GetDBName() string {
	if x != nil {
		return x.DBName
	}
	return ""
}

func (x *TaskUpdateInput) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *TaskUpdateInput) GetBackupCycle() string {
	if x != nil {
		return x.BackupCycle
	}
	return ""
}

func (x *TaskUpdateInput) GetKeepNumber() int64 {
	if x != nil {
		return x.KeepNumber
	}
	return 0
}

func (x *TaskUpdateInput) GetIsAllDBBak() int64 {
	if x != nil {
		return x.IsAllDBBak
	}
	return 0
}

func (x *TaskUpdateInput) GetIsDingSend() int64 {
	if x != nil {
		return x.IsDingSend
	}
	return 0
}

func (x *TaskUpdateInput) GetDingAccessToken() string {
	if x != nil {
		return x.DingAccessToken
	}
	return ""
}

func (x *TaskUpdateInput) GetDingSecret() string {
	if x != nil {
		return x.DingSecret
	}
	return ""
}

func (x *TaskUpdateInput) GetOssType() int64 {
	if x != nil {
		return x.OssType
	}
	return 0
}

func (x *TaskUpdateInput) GetIsOssSave() int64 {
	if x != nil {
		return x.IsOssSave
	}
	return 0
}

func (x *TaskUpdateInput) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *TaskUpdateInput) GetOssAccess() string {
	if x != nil {
		return x.OssAccess
	}
	return ""
}

func (x *TaskUpdateInput) GetOssSecret() string {
	if x != nil {
		return x.OssSecret
	}
	return ""
}

func (x *TaskUpdateInput) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *TaskUpdateInput) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

type TaskListInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostID   int64  `protobuf:"varint,4,opt,name=HostID,proto3" json:"HostID,omitempty"`
	Info     string `protobuf:"bytes,1,opt,name=Info,proto3" json:"Info,omitempty"`
	PageNo   int64  `protobuf:"varint,2,opt,name=PageNo,proto3" json:"PageNo,omitempty"`
	PageSize int64  `protobuf:"varint,3,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (x *TaskListInput) Reset() {
	*x = TaskListInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskListInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListInput) ProtoMessage() {}

func (x *TaskListInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListInput.ProtoReflect.Descriptor instead.
func (*TaskListInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{4}
}

func (x *TaskListInput) GetHostID() int64 {
	if x != nil {
		return x.HostID
	}
	return 0
}

func (x *TaskListInput) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *TaskListInput) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *TaskListInput) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type TaskListOutPut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"total"
	Total int64 `protobuf:"varint,1,opt,name=Total,proto3" json:"total"`
	// @inject_tag: json:"list"
	TaskListItem []*TaskListItem `protobuf:"bytes,2,rep,name=taskListItem,proto3" json:"list"`
	// @inject_tag: json:"page_no"
	PageNo int64 `protobuf:"varint,3,opt,name=PageNo,proto3" json:"page_no"`
	// @inject_tag: json:"page_size"
	PageSize int64 `protobuf:"varint,4,opt,name=PageSize,proto3" json:"page_size"`
}

func (x *TaskListOutPut) Reset() {
	*x = TaskListOutPut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskListOutPut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListOutPut) ProtoMessage() {}

func (x *TaskListOutPut) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListOutPut.ProtoReflect.Descriptor instead.
func (*TaskListOutPut) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{5}
}

func (x *TaskListOutPut) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TaskListOutPut) GetTaskListItem() []*TaskListItem {
	if x != nil {
		return x.TaskListItem
	}
	return nil
}

func (x *TaskListOutPut) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *TaskListOutPut) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type TaskListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id"
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	// @inject_tag: json:"host_id"
	HostID int64 `protobuf:"varint,2,opt,name=HostID,proto3" json:"host_id"`
	// @inject_tag: json:"host"
	Host string `protobuf:"bytes,3,opt,name=Host,proto3" json:"host"`
	// @inject_tag: json:"db_name"
	DBName string `protobuf:"bytes,4,opt,name=DBName,proto3" json:"db_name"`
	// @inject_tag: json:"service_name"
	ServiceName string `protobuf:"bytes,5,opt,name=ServiceName,proto3" json:"service_name"`
	// @inject_tag: json:"backup_cycle"
	BackupCycle string `protobuf:"bytes,6,opt,name=BackupCycle,proto3" json:"backup_cycle"`
	// @inject_tag: json:"keep_number"
	KeepNumber int64 `protobuf:"varint,7,opt,name=KeepNumber,proto3" json:"keep_number"`
	// @inject_tag: json:"status"
	Status int64 `protobuf:"varint,8,opt,name=Status,proto3" json:"status"`
	// @inject_tag: json:"create_at"
	CreateAt string `protobuf:"bytes,9,opt,name=CreateAt,proto3" json:"create_at"`
	// @inject_tag: json:"update_at"
	UpdateAt string `protobuf:"bytes,10,opt,name=UpdateAt,proto3" json:"update_at"`
	// @inject_tag: json:"deleted_at"
	DeletedAt string `protobuf:"bytes,11,opt,name=DeletedAt,proto3" json:"deleted_at"`
	// @inject_tag: json:"is_deleted"
	IsDeleted int64 `protobuf:"varint,12,opt,name=IsDeleted,proto3" json:"is_deleted"`
	// @inject_tag: json:"finish_num"
	FinishNum int64 `protobuf:"varint,13,opt,name=FinishNum,proto3" json:"finish_num"`
}

func (x *TaskListItem) Reset() {
	*x = TaskListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListItem) ProtoMessage() {}

func (x *TaskListItem) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListItem.ProtoReflect.Descriptor instead.
func (*TaskListItem) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{6}
}

func (x *TaskListItem) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TaskListItem) GetHostID() int64 {
	if x != nil {
		return x.HostID
	}
	return 0
}

func (x *TaskListItem) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *TaskListItem) GetDBName() string {
	if x != nil {
		return x.DBName
	}
	return ""
}

func (x *TaskListItem) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *TaskListItem) GetBackupCycle() string {
	if x != nil {
		return x.BackupCycle
	}
	return ""
}

func (x *TaskListItem) GetKeepNumber() int64 {
	if x != nil {
		return x.KeepNumber
	}
	return 0
}

func (x *TaskListItem) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TaskListItem) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *TaskListItem) GetUpdateAt() string {
	if x != nil {
		return x.UpdateAt
	}
	return ""
}

func (x *TaskListItem) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *TaskListItem) GetIsDeleted() int64 {
	if x != nil {
		return x.IsDeleted
	}
	return 0
}

func (x *TaskListItem) GetFinishNum() int64 {
	if x != nil {
		return x.FinishNum
	}
	return 0
}

type TaskDetailOutPut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"host"
	Host string `protobuf:"bytes,1,opt,name=Host,proto3" json:"host"`
	// @inject_tag: json:"content"
	Content string `protobuf:"bytes,2,opt,name=Content,proto3" json:"content"`
	// @inject_tag: json:"host_status"
	HostStatus int64 `protobuf:"varint,3,opt,name=HostStatus,proto3" json:"host_status"`
	// @inject_tag: json:"id"
	TaskID int64 `protobuf:"varint,5,opt,name=TaskID,proto3" json:"id"`
	// @inject_tag: json:"host_id"
	HostID int64 `protobuf:"varint,6,opt,name=HostID,proto3" json:"host_id"`
	// @inject_tag: json:"db_name"
	DBName string `protobuf:"bytes,7,opt,name=DBName,proto3" json:"db_name"`
	// @inject_tag: json:"service_name"
	ServiceName string `protobuf:"bytes,8,opt,name=ServiceName,proto3" json:"service_name"`
	// @inject_tag: json:"backup_cycle"
	BackupCycle string `protobuf:"bytes,9,opt,name=BackupCycle,proto3" json:"backup_cycle"`
	// @inject_tag: json:"keep_number"
	KeepNumber int64 `protobuf:"varint,10,opt,name=KeepNumber,proto3" json:"keep_number"`
	// @inject_tag: json:"status"
	Status int64 `protobuf:"varint,11,opt,name=Status,proto3" json:"status"`
	// @inject_tag: json:"create_at"
	CreateAt string `protobuf:"bytes,12,opt,name=CreateAt,proto3" json:"create_at"`
	// @inject_tag: json:"is_ding_send"
	IsDingSend int64 `protobuf:"varint,13,opt,name=IsDingSend,proto3" json:"is_ding_send"`
	// @inject_tag: json:"ding_access_token"
	DingAccessToken string `protobuf:"bytes,14,opt,name=DingAccessToken,proto3" json:"ding_access_token"`
	// @inject_tag: json:"ding_secret"
	DingSecret string `protobuf:"bytes,15,opt,name=DingSecret,proto3" json:"ding_secret"`
	// @inject_tag: json:"is_oss_save"
	IsOssSave int64 `protobuf:"varint,16,opt,name=IsOssSave,proto3" json:"is_oss_save"`
	// @inject_tag: json:"oss_type"
	OssType int64 `protobuf:"varint,17,opt,name=OssType,proto3" json:"oss_type"`
	// @inject_tag: json:"endpoint"
	Endpoint string `protobuf:"bytes,18,opt,name=Endpoint,proto3" json:"endpoint"`
	// @inject_tag: json:"oss_access"
	OssAccess string `protobuf:"bytes,19,opt,name=OssAccess,proto3" json:"oss_access"`
	// @inject_tag: json:"oss_secret"
	OssSecret string `protobuf:"bytes,20,opt,name=OssSecret,proto3" json:"oss_secret"`
	// @inject_tag: json:"bucket_name"
	BucketName string `protobuf:"bytes,21,opt,name=BucketName,proto3" json:"bucket_name"`
	// @inject_tag: json:"directory"
	Directory string `protobuf:"bytes,22,opt,name=Directory,proto3" json:"directory"`
}

func (x *TaskDetailOutPut) Reset() {
	*x = TaskDetailOutPut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDetailOutPut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDetailOutPut) ProtoMessage() {}

func (x *TaskDetailOutPut) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDetailOutPut.ProtoReflect.Descriptor instead.
func (*TaskDetailOutPut) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{7}
}

func (x *TaskDetailOutPut) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *TaskDetailOutPut) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TaskDetailOutPut) GetHostStatus() int64 {
	if x != nil {
		return x.HostStatus
	}
	return 0
}

func (x *TaskDetailOutPut) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *TaskDetailOutPut) GetHostID() int64 {
	if x != nil {
		return x.HostID
	}
	return 0
}

func (x *TaskDetailOutPut) GetDBName() string {
	if x != nil {
		return x.DBName
	}
	return ""
}

func (x *TaskDetailOutPut) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *TaskDetailOutPut) GetBackupCycle() string {
	if x != nil {
		return x.BackupCycle
	}
	return ""
}

func (x *TaskDetailOutPut) GetKeepNumber() int64 {
	if x != nil {
		return x.KeepNumber
	}
	return 0
}

func (x *TaskDetailOutPut) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TaskDetailOutPut) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *TaskDetailOutPut) GetIsDingSend() int64 {
	if x != nil {
		return x.IsDingSend
	}
	return 0
}

func (x *TaskDetailOutPut) GetDingAccessToken() string {
	if x != nil {
		return x.DingAccessToken
	}
	return ""
}

func (x *TaskDetailOutPut) GetDingSecret() string {
	if x != nil {
		return x.DingSecret
	}
	return ""
}

func (x *TaskDetailOutPut) GetIsOssSave() int64 {
	if x != nil {
		return x.IsOssSave
	}
	return 0
}

func (x *TaskDetailOutPut) GetOssType() int64 {
	if x != nil {
		return x.OssType
	}
	return 0
}

func (x *TaskDetailOutPut) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *TaskDetailOutPut) GetOssAccess() string {
	if x != nil {
		return x.OssAccess
	}
	return ""
}

func (x *TaskDetailOutPut) GetOssSecret() string {
	if x != nil {
		return x.OssSecret
	}
	return ""
}

func (x *TaskDetailOutPut) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *TaskDetailOutPut) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

var File_task_proto protoreflect.FileDescriptor

var file_task_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x0a, 0x0e, 0x54, 0x61,
	0x73, 0x6b, 0x4f, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x4b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x02, 0x4f, 0x4b, 0x22, 0xfa, 0x03, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x41,
	0x64, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x44, 0x42, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x44, 0x42, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4b,
	0x65, 0x65, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x4b, 0x65, 0x65, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x73, 0x41, 0x6c, 0x6c, 0x44, 0x42, 0x42, 0x61, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x49, 0x73, 0x41, 0x6c, 0x6c, 0x44, 0x42, 0x42, 0x61, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x73, 0x44, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x49, 0x73, 0x44, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x44,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x44, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4f, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x73, 0x4f, 0x73, 0x73, 0x53, 0x61, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x49, 0x73, 0x4f, 0x73, 0x73, 0x53, 0x61, 0x76, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x73, 0x73,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x73,
	0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x73, 0x73, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x73, 0x73, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x22, 0x1d, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x44, 0x22, 0x8d, 0x04, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x42, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x44, 0x42, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x65,
	0x65, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x4b, 0x65, 0x65, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73,
	0x41, 0x6c, 0x6c, 0x44, 0x42, 0x42, 0x61, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x49, 0x73, 0x41, 0x6c, 0x6c, 0x44, 0x42, 0x42, 0x61, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73,
	0x44, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x49, 0x73, 0x44, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x44, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4f, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x73, 0x4f, 0x73, 0x73, 0x53, 0x61, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x49, 0x73, 0x4f, 0x73, 0x73, 0x53, 0x61, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x73, 0x73, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x73, 0x73,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x73, 0x73, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x73, 0x73, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x22, 0x6f, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x75, 0x74, 0x50, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x4e, 0x0a, 0x0c,
	0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c,
	0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x50, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x50, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0xf0, 0x02, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x44, 0x42, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44,
	0x42, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x65, 0x65,
	0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4b,
	0x65, 0x65, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x49, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4e,
	0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x4e, 0x75, 0x6d, 0x22, 0xf8, 0x04, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x4f, 0x75, 0x74, 0x50, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x48, 0x6f, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x48, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x42, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x42, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x65, 0x65, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4b, 0x65, 0x65, 0x70, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x44, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x49, 0x73, 0x44, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x44, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x4f, 0x73, 0x73, 0x53, 0x61, 0x76, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x49, 0x73, 0x4f, 0x73, 0x73, 0x53, 0x61, 0x76, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x4f, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x4f, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x73, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x73, 0x73, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x73, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x73, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x32, 0xdf,
	0x06, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x65, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x41,
	0x64, 0x64, 0x12, 0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x2c,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x4f, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x67,
	0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x6e, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x2c, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x50, 0x75, 0x74, 0x22, 0x00, 0x12, 0x72, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x6e, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x50, 0x75, 0x74, 0x22,
	0x00, 0x12, 0x69, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x29, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x4f, 0x75, 0x74, 0x50, 0x75, 0x74, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0b,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x29, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x6e, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x29, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x2c, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x4f, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x3b, 0x74, 0x61, 0x73, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_task_proto_rawDescOnce sync.Once
	file_task_proto_rawDescData = file_task_proto_rawDesc
)

func file_task_proto_rawDescGZIP() []byte {
	file_task_proto_rawDescOnce.Do(func() {
		file_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_task_proto_rawDescData)
	})
	return file_task_proto_rawDescData
}

var file_task_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_task_proto_goTypes = []interface{}{
	(*TaskOneMessage)(nil),   // 0: go.micro.service.backupAgent.TaskOneMessage
	(*TaskAddInput)(nil),     // 1: go.micro.service.backupAgent.TaskAddInput
	(*TaskIDInput)(nil),      // 2: go.micro.service.backupAgent.TaskIDInput
	(*TaskUpdateInput)(nil),  // 3: go.micro.service.backupAgent.TaskUpdateInput
	(*TaskListInput)(nil),    // 4: go.micro.service.backupAgent.TaskListInput
	(*TaskListOutPut)(nil),   // 5: go.micro.service.backupAgent.TaskListOutPut
	(*TaskListItem)(nil),     // 6: go.micro.service.backupAgent.TaskListItem
	(*TaskDetailOutPut)(nil), // 7: go.micro.service.backupAgent.TaskDetailOutPut
}
var file_task_proto_depIdxs = []int32{
	6, // 0: go.micro.service.backupAgent.TaskListOutPut.taskListItem:type_name -> go.micro.service.backupAgent.TaskListItem
	1, // 1: go.micro.service.backupAgent.Task.TaskAdd:input_type -> go.micro.service.backupAgent.TaskAddInput
	2, // 2: go.micro.service.backupAgent.Task.TaskDelete:input_type -> go.micro.service.backupAgent.TaskIDInput
	3, // 3: go.micro.service.backupAgent.Task.TaskUpdate:input_type -> go.micro.service.backupAgent.TaskUpdateInput
	4, // 4: go.micro.service.backupAgent.Task.TaskList:input_type -> go.micro.service.backupAgent.TaskListInput
	4, // 5: go.micro.service.backupAgent.Task.GetTaskUnscopedList:input_type -> go.micro.service.backupAgent.TaskListInput
	2, // 6: go.micro.service.backupAgent.Task.TaskDetail:input_type -> go.micro.service.backupAgent.TaskIDInput
	2, // 7: go.micro.service.backupAgent.Task.RestoreTask:input_type -> go.micro.service.backupAgent.TaskIDInput
	2, // 8: go.micro.service.backupAgent.Task.TaskDestroy:input_type -> go.micro.service.backupAgent.TaskIDInput
	0, // 9: go.micro.service.backupAgent.Task.TaskAdd:output_type -> go.micro.service.backupAgent.TaskOneMessage
	0, // 10: go.micro.service.backupAgent.Task.TaskDelete:output_type -> go.micro.service.backupAgent.TaskOneMessage
	0, // 11: go.micro.service.backupAgent.Task.TaskUpdate:output_type -> go.micro.service.backupAgent.TaskOneMessage
	5, // 12: go.micro.service.backupAgent.Task.TaskList:output_type -> go.micro.service.backupAgent.TaskListOutPut
	5, // 13: go.micro.service.backupAgent.Task.GetTaskUnscopedList:output_type -> go.micro.service.backupAgent.TaskListOutPut
	7, // 14: go.micro.service.backupAgent.Task.TaskDetail:output_type -> go.micro.service.backupAgent.TaskDetailOutPut
	0, // 15: go.micro.service.backupAgent.Task.RestoreTask:output_type -> go.micro.service.backupAgent.TaskOneMessage
	0, // 16: go.micro.service.backupAgent.Task.TaskDestroy:output_type -> go.micro.service.backupAgent.TaskOneMessage
	9, // [9:17] is the sub-list for method output_type
	1, // [1:9] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_task_proto_init() }
func file_task_proto_init() {
	if File_task_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskOneMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskAddInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskIDInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskUpdateInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskListInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskListOutPut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDetailOutPut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_task_proto_goTypes,
		DependencyIndexes: file_task_proto_depIdxs,
		MessageInfos:      file_task_proto_msgTypes,
	}.Build()
	File_task_proto = out.File
	file_task_proto_rawDesc = nil
	file_task_proto_goTypes = nil
	file_task_proto_depIdxs = nil
}

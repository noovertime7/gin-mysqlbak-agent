// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: task.proto

package task

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Task service

func NewTaskEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Task service

type TaskService interface {
	TaskAdd(ctx context.Context, in *TaskAddInput, opts ...client.CallOption) (*TaskOneMessage, error)
	TaskAutoCreate(ctx context.Context, in *TaskAutoCreateInPut, opts ...client.CallOption) (*TaskOneMessage, error)
	TaskDelete(ctx context.Context, in *TaskIDInput, opts ...client.CallOption) (*TaskOneMessage, error)
	TaskUpdate(ctx context.Context, in *TaskUpdateInput, opts ...client.CallOption) (*TaskOneMessage, error)
	TaskList(ctx context.Context, in *TaskListInput, opts ...client.CallOption) (*TaskListOutPut, error)
	GetTaskUnscopedList(ctx context.Context, in *TaskListInput, opts ...client.CallOption) (*TaskListOutPut, error)
	TaskDetail(ctx context.Context, in *TaskIDInput, opts ...client.CallOption) (*TaskDetailOutPut, error)
	RestoreTask(ctx context.Context, in *TaskIDInput, opts ...client.CallOption) (*TaskOneMessage, error)
	TaskDestroy(ctx context.Context, in *TaskIDInput, opts ...client.CallOption) (*TaskOneMessage, error)
	GetDateNumInfo(ctx context.Context, in *DateNumInfoInput, opts ...client.CallOption) (*DateNumInfoOut, error)
}

type taskService struct {
	c    client.Client
	name string
}

func NewTaskService(name string, c client.Client) TaskService {
	return &taskService{
		c:    c,
		name: name,
	}
}

func (c *taskService) TaskAdd(ctx context.Context, in *TaskAddInput, opts ...client.CallOption) (*TaskOneMessage, error) {
	req := c.c.NewRequest(c.name, "Task.TaskAdd", in)
	out := new(TaskOneMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) TaskAutoCreate(ctx context.Context, in *TaskAutoCreateInPut, opts ...client.CallOption) (*TaskOneMessage, error) {
	req := c.c.NewRequest(c.name, "Task.TaskAutoCreate", in)
	out := new(TaskOneMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) TaskDelete(ctx context.Context, in *TaskIDInput, opts ...client.CallOption) (*TaskOneMessage, error) {
	req := c.c.NewRequest(c.name, "Task.TaskDelete", in)
	out := new(TaskOneMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) TaskUpdate(ctx context.Context, in *TaskUpdateInput, opts ...client.CallOption) (*TaskOneMessage, error) {
	req := c.c.NewRequest(c.name, "Task.TaskUpdate", in)
	out := new(TaskOneMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) TaskList(ctx context.Context, in *TaskListInput, opts ...client.CallOption) (*TaskListOutPut, error) {
	req := c.c.NewRequest(c.name, "Task.TaskList", in)
	out := new(TaskListOutPut)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetTaskUnscopedList(ctx context.Context, in *TaskListInput, opts ...client.CallOption) (*TaskListOutPut, error) {
	req := c.c.NewRequest(c.name, "Task.GetTaskUnscopedList", in)
	out := new(TaskListOutPut)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) TaskDetail(ctx context.Context, in *TaskIDInput, opts ...client.CallOption) (*TaskDetailOutPut, error) {
	req := c.c.NewRequest(c.name, "Task.TaskDetail", in)
	out := new(TaskDetailOutPut)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) RestoreTask(ctx context.Context, in *TaskIDInput, opts ...client.CallOption) (*TaskOneMessage, error) {
	req := c.c.NewRequest(c.name, "Task.RestoreTask", in)
	out := new(TaskOneMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) TaskDestroy(ctx context.Context, in *TaskIDInput, opts ...client.CallOption) (*TaskOneMessage, error) {
	req := c.c.NewRequest(c.name, "Task.TaskDestroy", in)
	out := new(TaskOneMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetDateNumInfo(ctx context.Context, in *DateNumInfoInput, opts ...client.CallOption) (*DateNumInfoOut, error) {
	req := c.c.NewRequest(c.name, "Task.GetDateNumInfo", in)
	out := new(DateNumInfoOut)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Task service

type TaskHandler interface {
	TaskAdd(context.Context, *TaskAddInput, *TaskOneMessage) error
	TaskAutoCreate(context.Context, *TaskAutoCreateInPut, *TaskOneMessage) error
	TaskDelete(context.Context, *TaskIDInput, *TaskOneMessage) error
	TaskUpdate(context.Context, *TaskUpdateInput, *TaskOneMessage) error
	TaskList(context.Context, *TaskListInput, *TaskListOutPut) error
	GetTaskUnscopedList(context.Context, *TaskListInput, *TaskListOutPut) error
	TaskDetail(context.Context, *TaskIDInput, *TaskDetailOutPut) error
	RestoreTask(context.Context, *TaskIDInput, *TaskOneMessage) error
	TaskDestroy(context.Context, *TaskIDInput, *TaskOneMessage) error
	GetDateNumInfo(context.Context, *DateNumInfoInput, *DateNumInfoOut) error
}

func RegisterTaskHandler(s server.Server, hdlr TaskHandler, opts ...server.HandlerOption) error {
	type task interface {
		TaskAdd(ctx context.Context, in *TaskAddInput, out *TaskOneMessage) error
		TaskAutoCreate(ctx context.Context, in *TaskAutoCreateInPut, out *TaskOneMessage) error
		TaskDelete(ctx context.Context, in *TaskIDInput, out *TaskOneMessage) error
		TaskUpdate(ctx context.Context, in *TaskUpdateInput, out *TaskOneMessage) error
		TaskList(ctx context.Context, in *TaskListInput, out *TaskListOutPut) error
		GetTaskUnscopedList(ctx context.Context, in *TaskListInput, out *TaskListOutPut) error
		TaskDetail(ctx context.Context, in *TaskIDInput, out *TaskDetailOutPut) error
		RestoreTask(ctx context.Context, in *TaskIDInput, out *TaskOneMessage) error
		TaskDestroy(ctx context.Context, in *TaskIDInput, out *TaskOneMessage) error
		GetDateNumInfo(ctx context.Context, in *DateNumInfoInput, out *DateNumInfoOut) error
	}
	type Task struct {
		task
	}
	h := &taskHandler{hdlr}
	return s.Handle(s.NewHandler(&Task{h}, opts...))
}

type taskHandler struct {
	TaskHandler
}

func (h *taskHandler) TaskAdd(ctx context.Context, in *TaskAddInput, out *TaskOneMessage) error {
	return h.TaskHandler.TaskAdd(ctx, in, out)
}

func (h *taskHandler) TaskAutoCreate(ctx context.Context, in *TaskAutoCreateInPut, out *TaskOneMessage) error {
	return h.TaskHandler.TaskAutoCreate(ctx, in, out)
}

func (h *taskHandler) TaskDelete(ctx context.Context, in *TaskIDInput, out *TaskOneMessage) error {
	return h.TaskHandler.TaskDelete(ctx, in, out)
}

func (h *taskHandler) TaskUpdate(ctx context.Context, in *TaskUpdateInput, out *TaskOneMessage) error {
	return h.TaskHandler.TaskUpdate(ctx, in, out)
}

func (h *taskHandler) TaskList(ctx context.Context, in *TaskListInput, out *TaskListOutPut) error {
	return h.TaskHandler.TaskList(ctx, in, out)
}

func (h *taskHandler) GetTaskUnscopedList(ctx context.Context, in *TaskListInput, out *TaskListOutPut) error {
	return h.TaskHandler.GetTaskUnscopedList(ctx, in, out)
}

func (h *taskHandler) TaskDetail(ctx context.Context, in *TaskIDInput, out *TaskDetailOutPut) error {
	return h.TaskHandler.TaskDetail(ctx, in, out)
}

func (h *taskHandler) RestoreTask(ctx context.Context, in *TaskIDInput, out *TaskOneMessage) error {
	return h.TaskHandler.RestoreTask(ctx, in, out)
}

func (h *taskHandler) TaskDestroy(ctx context.Context, in *TaskIDInput, out *TaskOneMessage) error {
	return h.TaskHandler.TaskDestroy(ctx, in, out)
}

func (h *taskHandler) GetDateNumInfo(ctx context.Context, in *DateNumInfoInput, out *DateNumInfoOut) error {
	return h.TaskHandler.GetDateNumInfo(ctx, in, out)
}
